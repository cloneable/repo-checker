package github

// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// OwnedRepo includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type OwnedRepo struct {
	Id string `json:"id"`
	// The name of the repository.
	Name string `json:"name"`
	// The description of the repository.
	Description string `json:"description"`
	// A list of branch protection rules for this repository.
	BranchProtectionRules OwnedRepoBranchProtectionRulesBranchProtectionRuleConnection `json:"branchProtectionRules"`
	// Whether or not Auto-merge can be enabled on pull requests in this repository.
	AutoMergeAllowed bool `json:"autoMergeAllowed"`
	// The Ref associated with the repository's default branch.
	DefaultBranchRef OwnedRepoDefaultBranchRef `json:"defaultBranchRef"`
	// Indicates if the repository is unmaintained.
	IsArchived bool `json:"isArchived"`
	// Indicates if the repository has been locked or not.
	IsLocked bool `json:"isLocked"`
	// Indicates the repository's visibility level.
	Visibility RepositoryVisibility `json:"visibility"`
	// Whether or not branches are automatically deleted when merged in this repository.
	DeleteBranchOnMerge bool `json:"deleteBranchOnMerge"`
	// Whether this repository allows forks.
	ForkingAllowed bool `json:"forkingAllowed"`
	// A list of direct forked repositories.
	Forks OwnedRepoForksRepositoryConnection `json:"forks"`
	// Indicates if the repository has issues feature enabled.
	HasIssuesEnabled bool `json:"hasIssuesEnabled"`
	// Indicates if the repository has wiki feature enabled.
	HasWikiEnabled bool `json:"hasWikiEnabled"`
	// Indicates if the repository has the Projects feature enabled.
	HasProjectsEnabled bool `json:"hasProjectsEnabled"`
	// Identifies if the repository is private or internal.
	IsPrivate bool `json:"isPrivate"`
	// Identifies if the repository is a template that can be used to generate new repositories.
	IsTemplate bool `json:"isTemplate"`
	// Returns true if this repository has a security policy
	IsSecurityPolicyEnabled bool `json:"isSecurityPolicyEnabled"`
}

// OwnedRepoBranchProtectionRulesBranchProtectionRuleConnection includes the requested fields of the GraphQL type BranchProtectionRuleConnection.
// The GraphQL type's documentation follows.
//
// The connection type for BranchProtectionRule.
type OwnedRepoBranchProtectionRulesBranchProtectionRuleConnection struct {
	// A list of nodes.
	Nodes []OwnedRepoBranchProtectionRulesBranchProtectionRuleConnectionNodesBranchProtectionRule `json:"nodes"`
}

// OwnedRepoBranchProtectionRulesBranchProtectionRuleConnectionNodesBranchProtectionRule includes the requested fields of the GraphQL type BranchProtectionRule.
// The GraphQL type's documentation follows.
//
// A branch protection rule.
type OwnedRepoBranchProtectionRulesBranchProtectionRuleConnectionNodesBranchProtectionRule struct {
	Id string `json:"id"`
	// Identifies the protection rule pattern.
	Pattern string `json:"pattern"`
	// Can this branch be deleted.
	AllowsDeletions bool `json:"allowsDeletions"`
	// Are force pushes allowed on this branch.
	AllowsForcePushes bool `json:"allowsForcePushes"`
	// Can admins overwrite branch protection.
	IsAdminEnforced bool `json:"isAdminEnforced"`
	// Number of approving reviews required to update matching branches.
	RequiredApprovingReviewCount int `json:"requiredApprovingReviewCount"`
	// Are approving reviews required to update matching branches.
	RequiresApprovingReviews bool `json:"requiresApprovingReviews"`
	// Are merge commits prohibited from being pushed to this branch.
	RequiresLinearHistory bool `json:"requiresLinearHistory"`
	// Are status checks required to update matching branches.
	RequiresStatusChecks bool `json:"requiresStatusChecks"`
	// Is pushing to matching branches restricted.
	RestrictsPushes bool `json:"restrictsPushes"`
}

// OwnedRepoDefaultBranchRef includes the requested fields of the GraphQL type Ref.
// The GraphQL type's documentation follows.
//
// Represents a Git reference.
type OwnedRepoDefaultBranchRef struct {
	// The ref name.
	Name string `json:"name"`
}

// OwnedRepoForksRepositoryConnection includes the requested fields of the GraphQL type RepositoryConnection.
// The GraphQL type's documentation follows.
//
// A list of repositories owned by the subject.
type OwnedRepoForksRepositoryConnection struct {
	// A list of nodes.
	Nodes []OwnedRepoForksRepositoryConnectionNodesRepository `json:"nodes"`
}

// OwnedRepoForksRepositoryConnectionNodesRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type OwnedRepoForksRepositoryConnectionNodesRepository struct {
	Id string `json:"id"`
	// The User owner of the repository.
	Owner OwnedRepoForksRepositoryConnectionNodesRepositoryOwner `json:"-"`
	// The name of the repository.
	Name string `json:"name"`
}

func (v *OwnedRepoForksRepositoryConnectionNodesRepository) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*OwnedRepoForksRepositoryConnectionNodesRepository
		Owner json.RawMessage `json:"owner"`
		graphql.NoUnmarshalJSON
	}
	firstPass.OwnedRepoForksRepositoryConnectionNodesRepository = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Owner
		src := firstPass.Owner
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalOwnedRepoForksRepositoryConnectionNodesRepositoryOwner(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal OwnedRepoForksRepositoryConnectionNodesRepository.Owner: %w", err)
			}
		}
	}
	return nil
}

type __premarshalOwnedRepoForksRepositoryConnectionNodesRepository struct {
	Id string `json:"id"`

	Owner json.RawMessage `json:"owner"`

	Name string `json:"name"`
}

func (v *OwnedRepoForksRepositoryConnectionNodesRepository) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *OwnedRepoForksRepositoryConnectionNodesRepository) __premarshalJSON() (*__premarshalOwnedRepoForksRepositoryConnectionNodesRepository, error) {
	var retval __premarshalOwnedRepoForksRepositoryConnectionNodesRepository

	retval.Id = v.Id
	{

		dst := &retval.Owner
		src := v.Owner
		var err error
		*dst, err = __marshalOwnedRepoForksRepositoryConnectionNodesRepositoryOwner(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal OwnedRepoForksRepositoryConnectionNodesRepository.Owner: %w", err)
		}
	}
	retval.Name = v.Name
	return &retval, nil
}

// OwnedRepoForksRepositoryConnectionNodesRepositoryOwner includes the requested fields of the GraphQL interface RepositoryOwner.
//
// OwnedRepoForksRepositoryConnectionNodesRepositoryOwner is implemented by the following types:
// OwnedRepoForksRepositoryConnectionNodesRepositoryOwnerOrganization
// OwnedRepoForksRepositoryConnectionNodesRepositoryOwnerUser
// The GraphQL type's documentation follows.
//
// Represents an owner of a Repository.
type OwnedRepoForksRepositoryConnectionNodesRepositoryOwner interface {
	implementsGraphQLInterfaceOwnedRepoForksRepositoryConnectionNodesRepositoryOwner()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetLogin returns the interface-field "login" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The username used to login.
	GetLogin() string
}

func (v *OwnedRepoForksRepositoryConnectionNodesRepositoryOwnerOrganization) implementsGraphQLInterfaceOwnedRepoForksRepositoryConnectionNodesRepositoryOwner() {
}

// GetTypename is a part of, and documented with, the interface OwnedRepoForksRepositoryConnectionNodesRepositoryOwner.
func (v *OwnedRepoForksRepositoryConnectionNodesRepositoryOwnerOrganization) GetTypename() string {
	return v.Typename
}

// GetLogin is a part of, and documented with, the interface OwnedRepoForksRepositoryConnectionNodesRepositoryOwner.
func (v *OwnedRepoForksRepositoryConnectionNodesRepositoryOwnerOrganization) GetLogin() string {
	return v.Login
}

func (v *OwnedRepoForksRepositoryConnectionNodesRepositoryOwnerUser) implementsGraphQLInterfaceOwnedRepoForksRepositoryConnectionNodesRepositoryOwner() {
}

// GetTypename is a part of, and documented with, the interface OwnedRepoForksRepositoryConnectionNodesRepositoryOwner.
func (v *OwnedRepoForksRepositoryConnectionNodesRepositoryOwnerUser) GetTypename() string {
	return v.Typename
}

// GetLogin is a part of, and documented with, the interface OwnedRepoForksRepositoryConnectionNodesRepositoryOwner.
func (v *OwnedRepoForksRepositoryConnectionNodesRepositoryOwnerUser) GetLogin() string {
	return v.Login
}

func __unmarshalOwnedRepoForksRepositoryConnectionNodesRepositoryOwner(b []byte, v *OwnedRepoForksRepositoryConnectionNodesRepositoryOwner) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Organization":
		*v = new(OwnedRepoForksRepositoryConnectionNodesRepositoryOwnerOrganization)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(OwnedRepoForksRepositoryConnectionNodesRepositoryOwnerUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"Response was missing RepositoryOwner.__typename")
	default:
		return fmt.Errorf(
			`Unexpected concrete type for OwnedRepoForksRepositoryConnectionNodesRepositoryOwner: "%v"`, tn.TypeName)
	}
}

func __marshalOwnedRepoForksRepositoryConnectionNodesRepositoryOwner(v *OwnedRepoForksRepositoryConnectionNodesRepositoryOwner) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *OwnedRepoForksRepositoryConnectionNodesRepositoryOwnerOrganization:
		typename = "Organization"

		result := struct {
			TypeName string `json:"__typename"`
			*OwnedRepoForksRepositoryConnectionNodesRepositoryOwnerOrganization
		}{typename, v}
		return json.Marshal(result)
	case *OwnedRepoForksRepositoryConnectionNodesRepositoryOwnerUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*OwnedRepoForksRepositoryConnectionNodesRepositoryOwnerUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`Unexpected concrete type for OwnedRepoForksRepositoryConnectionNodesRepositoryOwner: "%T"`, v)
	}
}

// OwnedRepoForksRepositoryConnectionNodesRepositoryOwnerOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type OwnedRepoForksRepositoryConnectionNodesRepositoryOwnerOrganization struct {
	Typename string `json:"__typename"`
	// The username used to login.
	Login string `json:"login"`
}

// OwnedRepoForksRepositoryConnectionNodesRepositoryOwnerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type OwnedRepoForksRepositoryConnectionNodesRepositoryOwnerUser struct {
	Typename string `json:"__typename"`
	// The username used to login.
	Login string `json:"login"`
}

// OwnerReposRepositoryOwner includes the requested fields of the GraphQL interface RepositoryOwner.
//
// OwnerReposRepositoryOwner is implemented by the following types:
// OwnerReposRepositoryOwnerOrganization
// OwnerReposRepositoryOwnerUser
// The GraphQL type's documentation follows.
//
// Represents an owner of a Repository.
type OwnerReposRepositoryOwner interface {
	implementsGraphQLInterfaceOwnerReposRepositoryOwner()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetRepositories returns the interface-field "repositories" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// A list of repositories that the user owns.
	GetRepositories() OwnerReposRepositoryOwnerRepositoriesRepositoryConnection
}

func (v *OwnerReposRepositoryOwnerOrganization) implementsGraphQLInterfaceOwnerReposRepositoryOwner() {
}

// GetTypename is a part of, and documented with, the interface OwnerReposRepositoryOwner.
func (v *OwnerReposRepositoryOwnerOrganization) GetTypename() string { return v.Typename }

// GetRepositories is a part of, and documented with, the interface OwnerReposRepositoryOwner.
func (v *OwnerReposRepositoryOwnerOrganization) GetRepositories() OwnerReposRepositoryOwnerRepositoriesRepositoryConnection {
	return v.Repositories
}

func (v *OwnerReposRepositoryOwnerUser) implementsGraphQLInterfaceOwnerReposRepositoryOwner() {}

// GetTypename is a part of, and documented with, the interface OwnerReposRepositoryOwner.
func (v *OwnerReposRepositoryOwnerUser) GetTypename() string { return v.Typename }

// GetRepositories is a part of, and documented with, the interface OwnerReposRepositoryOwner.
func (v *OwnerReposRepositoryOwnerUser) GetRepositories() OwnerReposRepositoryOwnerRepositoriesRepositoryConnection {
	return v.Repositories
}

func __unmarshalOwnerReposRepositoryOwner(b []byte, v *OwnerReposRepositoryOwner) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Organization":
		*v = new(OwnerReposRepositoryOwnerOrganization)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(OwnerReposRepositoryOwnerUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"Response was missing RepositoryOwner.__typename")
	default:
		return fmt.Errorf(
			`Unexpected concrete type for OwnerReposRepositoryOwner: "%v"`, tn.TypeName)
	}
}

func __marshalOwnerReposRepositoryOwner(v *OwnerReposRepositoryOwner) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *OwnerReposRepositoryOwnerOrganization:
		typename = "Organization"

		result := struct {
			TypeName string `json:"__typename"`
			*OwnerReposRepositoryOwnerOrganization
		}{typename, v}
		return json.Marshal(result)
	case *OwnerReposRepositoryOwnerUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*OwnerReposRepositoryOwnerUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`Unexpected concrete type for OwnerReposRepositoryOwner: "%T"`, v)
	}
}

// OwnerReposRepositoryOwnerOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type OwnerReposRepositoryOwnerOrganization struct {
	Typename string `json:"__typename"`
	// A list of repositories that the user owns.
	Repositories OwnerReposRepositoryOwnerRepositoriesRepositoryConnection `json:"repositories"`
}

// OwnerReposRepositoryOwnerRepositoriesRepositoryConnection includes the requested fields of the GraphQL type RepositoryConnection.
// The GraphQL type's documentation follows.
//
// A list of repositories owned by the subject.
type OwnerReposRepositoryOwnerRepositoriesRepositoryConnection struct {
	// Information to aid in pagination.
	PageInfo OwnerReposRepositoryOwnerRepositoriesRepositoryConnectionPageInfo `json:"pageInfo"`
	// A list of edges.
	Edges []OwnerReposRepositoryOwnerRepositoriesRepositoryConnectionEdgesRepositoryEdge `json:"edges"`
}

// OwnerReposRepositoryOwnerRepositoriesRepositoryConnectionEdgesRepositoryEdge includes the requested fields of the GraphQL type RepositoryEdge.
// The GraphQL type's documentation follows.
//
// An edge in a connection.
type OwnerReposRepositoryOwnerRepositoriesRepositoryConnectionEdgesRepositoryEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node OwnedRepo `json:"node"`
}

// OwnerReposRepositoryOwnerRepositoriesRepositoryConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type OwnerReposRepositoryOwnerRepositoriesRepositoryConnectionPageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
}

// OwnerReposRepositoryOwnerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type OwnerReposRepositoryOwnerUser struct {
	Typename string `json:"__typename"`
	// A list of repositories that the user owns.
	Repositories OwnerReposRepositoryOwnerRepositoriesRepositoryConnection `json:"repositories"`
}

// OwnerReposResponse is returned by OwnerRepos on success.
type OwnerReposResponse struct {
	// Lookup a repository owner (ie. either a User or an Organization) by login.
	RepositoryOwner OwnerReposRepositoryOwner `json:"-"`
}

func (v *OwnerReposResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*OwnerReposResponse
		RepositoryOwner json.RawMessage `json:"repositoryOwner"`
		graphql.NoUnmarshalJSON
	}
	firstPass.OwnerReposResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.RepositoryOwner
		src := firstPass.RepositoryOwner
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalOwnerReposRepositoryOwner(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal OwnerReposResponse.RepositoryOwner: %w", err)
			}
		}
	}
	return nil
}

type __premarshalOwnerReposResponse struct {
	RepositoryOwner json.RawMessage `json:"repositoryOwner"`
}

func (v *OwnerReposResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *OwnerReposResponse) __premarshalJSON() (*__premarshalOwnerReposResponse, error) {
	var retval __premarshalOwnerReposResponse

	{

		dst := &retval.RepositoryOwner
		src := v.RepositoryOwner
		var err error
		*dst, err = __marshalOwnerReposRepositoryOwner(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal OwnerReposResponse.RepositoryOwner: %w", err)
		}
	}
	return &retval, nil
}

// RepoLabel includes the requested fields of the GraphQL type Label.
// The GraphQL type's documentation follows.
//
// A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
type RepoLabel struct {
	Id string `json:"id"`
	// Identifies the label name.
	Name string `json:"name"`
	// A brief description of this label.
	Description string `json:"description"`
	// Identifies the label color.
	Color string `json:"color"`
	// Indicates whether or not this is a default label.
	IsDefault bool `json:"isDefault"`
	// A list of pull requests associated with this label.
	PullRequests RepoLabelPullRequestsPullRequestConnection `json:"pullRequests"`
	// A list of issues associated with this label.
	Issues RepoLabelIssuesIssueConnection `json:"issues"`
}

// RepoLabelIssuesIssueConnection includes the requested fields of the GraphQL type IssueConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Issue.
type RepoLabelIssuesIssueConnection struct {
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
}

// RepoLabelPullRequestsPullRequestConnection includes the requested fields of the GraphQL type PullRequestConnection.
// The GraphQL type's documentation follows.
//
// The connection type for PullRequest.
type RepoLabelPullRequestsPullRequestConnection struct {
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
}

// RepoLabelsRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type RepoLabelsRepository struct {
	// A list of labels associated with the repository.
	Labels RepoLabelsRepositoryLabelsLabelConnection `json:"labels"`
}

// RepoLabelsRepositoryLabelsLabelConnection includes the requested fields of the GraphQL type LabelConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Label.
type RepoLabelsRepositoryLabelsLabelConnection struct {
	// Information to aid in pagination.
	PageInfo RepoLabelsRepositoryLabelsLabelConnectionPageInfo `json:"pageInfo"`
	// A list of edges.
	Edges []RepoLabelsRepositoryLabelsLabelConnectionEdgesLabelEdge `json:"edges"`
}

// RepoLabelsRepositoryLabelsLabelConnectionEdgesLabelEdge includes the requested fields of the GraphQL type LabelEdge.
// The GraphQL type's documentation follows.
//
// An edge in a connection.
type RepoLabelsRepositoryLabelsLabelConnectionEdgesLabelEdge struct {
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
	// The item at the end of the edge.
	Node RepoLabel `json:"node"`
}

// RepoLabelsRepositoryLabelsLabelConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type RepoLabelsRepositoryLabelsLabelConnectionPageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
}

// RepoLabelsResponse is returned by RepoLabels on success.
type RepoLabelsResponse struct {
	// Lookup a given repository by the owner and repository name.
	Repository RepoLabelsRepository `json:"repository"`
}

// The repository's visibility level.
type RepositoryVisibility string

const (
	// The repository is visible only to users in the same business.
	RepositoryVisibilityInternal RepositoryVisibility = "INTERNAL"
	// The repository is visible only to those with explicit access.
	RepositoryVisibilityPrivate RepositoryVisibility = "PRIVATE"
	// The repository is visible to everyone.
	RepositoryVisibilityPublic RepositoryVisibility = "PUBLIC"
)

// __OwnerReposInput is used internally by genqlient
type __OwnerReposInput struct {
	Login      string `json:"login"`
	RepoCount  int    `json:"repoCount"`
	RepoCursor string `json:"repoCursor,omitempty"`
}

// __RepoLabelsInput is used internally by genqlient
type __RepoLabelsInput struct {
	RepoOwner   string `json:"repoOwner"`
	RepoName    string `json:"repoName"`
	LabelCount  int    `json:"labelCount"`
	LabelCursor string `json:"labelCursor,omitempty"`
}

func OwnerRepos(
	ctx context.Context,
	client graphql.Client,
	login string,
	repoCount int,
	repoCursor string,
) (*OwnerReposResponse, error) {
	__input := __OwnerReposInput{
		Login:      login,
		RepoCount:  repoCount,
		RepoCursor: repoCursor,
	}
	var err error

	var retval OwnerReposResponse
	err = client.MakeRequest(
		ctx,
		"OwnerRepos",
		`
query OwnerRepos ($login: String!, $repoCount: Int!, $repoCursor: String) {
	repositoryOwner(login: $login) {
		__typename
		repositories(first: $repoCount, after: $repoCursor) {
			pageInfo {
				endCursor
				hasNextPage
			}
			edges {
				cursor
				node {
					id
					name
					description
					branchProtectionRules(first: 10) {
						nodes {
							id
							pattern
							allowsDeletions
							allowsForcePushes
							isAdminEnforced
							requiredApprovingReviewCount
							requiresApprovingReviews
							requiresLinearHistory
							requiresStatusChecks
							restrictsPushes
						}
					}
					autoMergeAllowed
					defaultBranchRef {
						name
					}
					isArchived
					isLocked
					visibility
					deleteBranchOnMerge
					forkingAllowed
					forks(first: 10) {
						nodes {
							id
							owner {
								__typename
								login
							}
							name
						}
					}
					hasIssuesEnabled
					hasWikiEnabled
					hasProjectsEnabled
					isPrivate
					isTemplate
					isSecurityPolicyEnabled
				}
			}
		}
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func RepoLabels(
	ctx context.Context,
	client graphql.Client,
	repoOwner string,
	repoName string,
	labelCount int,
	labelCursor string,
) (*RepoLabelsResponse, error) {
	__input := __RepoLabelsInput{
		RepoOwner:   repoOwner,
		RepoName:    repoName,
		LabelCount:  labelCount,
		LabelCursor: labelCursor,
	}
	var err error

	var retval RepoLabelsResponse
	err = client.MakeRequest(
		ctx,
		"RepoLabels",
		`
query RepoLabels ($repoOwner: String!, $repoName: String!, $labelCount: Int!, $labelCursor: String) {
	repository(owner: $repoOwner, name: $repoName) {
		labels(first: $labelCount, after: $labelCursor) {
			pageInfo {
				endCursor
				hasNextPage
			}
			edges {
				cursor
				node {
					id
					name
					description
					color
					isDefault
					pullRequests {
						totalCount
					}
					issues {
						totalCount
					}
				}
			}
		}
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}
